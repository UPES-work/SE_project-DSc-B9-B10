# 🎓 Student Record Management System

A desktop-based software built with Python and Tkinter to manage student academic records, attendance, and fees, with role-based access for administrators and faculty. The system supports login functionality, student CRUD operations, academic performance management, and Excel-based data storage.

---

## 🛠 Tools & Technologies Used

- **Python 3.x**
- **Tkinter** (for GUI)
- **Pandas** (for Excel data handling)
- **openpyxl** (Excel file support for Pandas)
- **Microsoft Excel (.xlsx)** (used for persistent storage)

---

## 📦 Package Dependencies

To run this project, ensure the following Python packages are installed:

```bash
pip install pandas openpyxl
```

---

## 🚀 How to Execute the Project

1. Clone the repository:
   ```bash
   git clone https://github.com/your-username/student-record-system.git
   cd student-record-system
   ```
2. Install required dependencies:
   ```bash
   pip install pandas openpyxl
   ```
3. Run the main script:
   ```bash
   python student_management.py
   ```

---

## 🧠 Problem Statement

Managing student records manually is tedious and error-prone. This project automates the record-keeping process for educational institutions by providing a digital solution to store, view, update, and manage student information securely.

---

## ✨ Key Features and Functionalities

- 🔐 **Login system** with role-based access: `admin` and multiple `faculty` users.
- 📋 **Add, Edit, and Delete** student records.
- 📈 **Subject-wise academic marks entry** with automatic grade calculation.
- 🎯 **Filter students by class** (9th–12th).
- 💾 **Persistent Excel-based storage** of student records.
- 📊 **Automatic grade assignment** based on marks percentage.
- 👨‍🏫 Faculty can only view/edit academics; Admin can modify all fields.

---

## 🎯 Target Users

- School or college **administrators** managing student records.
- Subject **faculty members** who need to input academic performance data.
- Small to mid-sized educational institutions looking for a lightweight desktop solution.

---

## 📋 Software Development Life Cycle (SDLC) Model

**Waterfall Model** was adopted for this project, with the following phases:

1. Requirements Gathering
2. Design
3. Implementation
4. Testing
5. Deployment
6. Maintenance

---

## 📌 Requirements Gathering & Validation

- Conducted informal interviews with faculty and administrators.
- Created a checklist of needed features.
- Validated requirements through feedback loops and prototype reviews.

---

## 🧪 Testing Method

- **Manual Testing**: Performed on each functionality like login, record creation, editing, deletion, and academic mark entry.
- **Validation Checks**: Ensured proper data types (e.g., marks between 0–100), field presence, and role-based access control.

---

## 🧱 Challenges Faced & Solutions

| Challenge | Solution |
|----------|----------|
| Role-based field access | Used conditional rendering in Tkinter based on user role |
| Persistent data storage | Leveraged `pandas` with Excel files using `openpyxl` |
| Input validation for marks | Added strict exception handling and error messages |
| GUI responsiveness | Utilized `tkinter.ttk.Treeview` for smooth table rendering |

---

## 🌐 Deployment Instructions

This is a **desktop application** and doesn't require web deployment. To deploy:

1. Ensure Python and dependencies are installed.
2. Run the `student_management.py` file.
3. Use the pre-defined login credentials:
   - **Admin**: `admin / admin123`
   - **Faculty**: `faculty1 / fac123`, `faculty2 / fac234`, etc.

---

## 🚀 Future Scope

- Switch from Excel to **SQLite/MySQL** for robust data management.
- Add **user registration and password encryption**.
- Include **report card generation** and **PDF export**.
- Implement **search and sort** features in the student table.
- Add **multi-user concurrency** via a backend server.

---

## 👥 Team Members & Roles

| Name          | Role               |
|---------------|--------------------|
| Nikunj Mathur - 500124255     | Full-stack Developer, Designer, and Tester |
  Akshat Sukhija - 500120425       Web Developer and Designer       

## Working code of the project
/*
import tkinter as tk
from tkinter import messagebox, ttk
import pandas as pd
import os

# --- Excel Setup ---
excel_file = "students.xlsx"
columns = ["Name", "Roll Number", "Contact", "Address", "Class", "Fees", "Attendance", "Academics", "Grade"]
if not os.path.exists(excel_file):
    pd.DataFrame(columns=columns).to_excel(excel_file, index=False)

def save_to_excel(student):
    df = pd.read_excel(excel_file)
    df = pd.concat([df, pd.DataFrame([student])], ignore_index=True)
    df.to_excel(excel_file, index=False)

def save_all_students(students):
    pd.DataFrame(students).to_excel(excel_file, index=False)

# --- Users & Roles ---
users = {
    "admin": {"password": "admin123", "role": "admin"},
    "faculty1": {"password": "fac123", "role": "faculty"},
    "faculty2": {"password": "fac234", "role": "faculty"},
    "faculty3": {"password": "fac345", "role": "faculty"},
    "faculty4": {"password": "fac456", "role": "faculty"},
}

# --- Logout Function ---
def logout(window):
    window.destroy()
    show_login_window()

# --- Dashboard ---
def open_dashboard(role):
    login_window.destroy()

    root = tk.Tk()
    root.title("Student Record Management System")
    root.geometry("1200x800")
    root.configure(bg="lightblue")

    tk.Label(root, text=f"Student Record Dashboard - Logged in as {role.title()}",
             font=("Arial", 18), bg="lightblue").pack(pady=10)

    filter_frame = tk.Frame(root, bg="lightblue")
    filter_frame.pack(pady=10)

    selected_class = tk.StringVar(value="All")

    def filter_students():
        filtered = students
        if selected_class.get() != "All":
            filtered = [s for s in students if s["Class"] == selected_class.get()]
        update_table(filtered)

    tk.Button(filter_frame, text="All", command=lambda: selected_class.set("All") or filter_students(), width=10).pack(side="left", padx=5)
    for cls in ["9th", "10th", "11th", "12th"]:
        tk.Button(filter_frame, text=f"Class {cls}", command=lambda c=cls: selected_class.set(c) or filter_students(), width=12).pack(side="left", padx=5)

    form_frame = tk.Frame(root, bg="lightblue")
    form_frame.pack(pady=10)

    name_var = tk.StringVar()
    roll_var = tk.StringVar()
    contact_var = tk.StringVar()
    address_var = tk.StringVar()
    class_var = tk.StringVar()
    fees_var = tk.StringVar()
    attendance_var = tk.StringVar()

    def clear_fields():
        for var in [name_var, roll_var, contact_var, address_var, class_var, fees_var, attendance_var]:
            var.set("")

    def add_student():
        student = {
            "Name": name_var.get(),
            "Roll Number": roll_var.get(),
            "Contact": contact_var.get(),
            "Address": address_var.get(),
            "Class": class_var.get(),
            "Fees": fees_var.get() if role == "admin" else "N/A",
            "Attendance": attendance_var.get(),
            "Academics": "",
            "Grade": ""
        }
        students.append(student)
        save_all_students(students)
        update_table()
        clear_fields()
        messagebox.showinfo("Success", "Student record added!")

    def delete_student():
        selected = tree.selection()
        if not selected:
            messagebox.showwarning("No selection", "Please select a student to delete.")
            return
        index = tree.index(selected[0])
        tree.delete(selected[0])
        del students[index]
        save_all_students(students)
        update_table()
        messagebox.showinfo("Deleted", "Student record deleted.")

    def edit_student():
        selected = tree.selection()
        if not selected:
            messagebox.showwarning("No selection", "Please select a student to edit.")
            return
        index = tree.index(selected[0])

        students[index]["Name"] = name_var.get()
        students[index]["Roll Number"] = roll_var.get()
        students[index]["Contact"] = contact_var.get()
        students[index]["Address"] = address_var.get()
        students[index]["Class"] = class_var.get()
        students[index]["Attendance"] = attendance_var.get()
        if role == "admin":
            students[index]["Fees"] = fees_var.get()

        save_all_students(students)
        update_table()
        clear_fields()
        messagebox.showinfo("Updated", "Student record updated.")

    def open_academic_entry(editing=False):
        selected = tree.selection()
        if not selected:
            messagebox.showwarning("Select Student", "Please select a student from the table.")
            return

        index = tree.index(selected[0])
        student = students[index]

        entry_win = tk.Toplevel(root)
        entry_win.title("Academic Marks" if not editing else "Edit Academic Marks")
        entry_win.geometry("400x350")
        entry_win.configure(bg="white")

        tk.Label(entry_win, text="Enter Marks (Out of 100)", font=("Arial", 14), bg="white").pack(pady=10)

        subjects = ["Math", "Science", "English", "History", "Computer"]
        subject_vars = {}

        for idx, subject in enumerate(subjects):
            tk.Label(entry_win, text=subject + ":", bg="white").place(x=50, y=60 + idx*40)
            var = tk.StringVar()
            subject_vars[subject] = var
            tk.Entry(entry_win, textvariable=var, width=10).place(x=200, y=60 + idx*40)

        def save_marks():
            marks = {}
            total = 0
            try:
                for subject, var in subject_vars.items():
                    mark = int(var.get())
                    if not (0 <= mark <= 100):
                        raise ValueError
                    marks[subject] = mark
                    total += mark
            except:
                messagebox.showerror("Invalid Input", "Please enter valid marks (0–100).")
                return

            percentage = round((total / (100 * len(subjects))) * 100, 2)
            student["Academics"] = f"{percentage}%"

            if 50 <= percentage < 60:
                grade = "C"
            elif 60 <= percentage < 70:
                grade = "B"
            elif 70 <= percentage < 80:
                grade = "A"
            elif 80 <= percentage < 91:
                grade = "A+"
            elif 91 <= percentage <= 100:
                grade = "O"
            else:
                grade = "F"

            student["Grade"] = grade
            students[index] = student
            save_all_students(students)
            update_table()
            entry_win.destroy()
            messagebox.showinfo("Success", f"Marks {'updated' if editing else 'saved'} successfully!\nOverall: {percentage}%")

        tk.Button(entry_win, text="Save" if not editing else "Update", command=save_marks, bg="green", fg="white").place(x=160, y=300)

    def load_students():
        df = pd.read_excel(excel_file)
        return df.to_dict(orient="records")

    def update_table(data=None):
        data = data or students
        total_label.config(text=f"Total Students: {len(data)}")
        for row in tree.get_children():
            tree.delete(row)
        for student in data:
            tree.insert("", "end", values=tuple(student.get(col, "") for col in columns))

    def on_row_select(event):
        selected = tree.selection()
        if selected:
            values = tree.item(selected[0], 'values')
            for var, val in zip([name_var, roll_var, contact_var, address_var, class_var, fees_var, attendance_var], values):
                var.set(val)

    students = load_students()

    fields = [
        ("Name", name_var), ("Roll Number", roll_var), ("Contact Number", contact_var),
        ("Address", address_var), ("Class", class_var), ("Attendance", attendance_var)
    ]

    for idx, (label, var) in enumerate(fields):
        tk.Label(form_frame, text=label, bg="lightblue").grid(row=idx, column=0, sticky="e", padx=5, pady=2)
        tk.Entry(form_frame, textvariable=var, width=30).grid(row=idx, column=1, padx=5, pady=2)

    if role == "admin":
        tk.Label(form_frame, text="Fees", bg="lightblue").grid(row=7, column=0, sticky="e")
        tk.Entry(form_frame, textvariable=fees_var, width=30).grid(row=7, column=1, padx=5, pady=2)

    tk.Button(form_frame, text="Add Student", command=add_student, bg="green", fg="white", width=20).grid(row=8, column=0, pady=10)
    if role == "admin":
        tk.Button(form_frame, text="Edit Student", command=edit_student, bg="orange", fg="white", width=20).grid(row=8, column=1, pady=10)
        tk.Button(form_frame, text="Delete Student", command=delete_student, bg="red", fg="white", width=20).grid(row=9, columnspan=2, pady=5)

    total_label = tk.Label(root, text=f"Total Students: {len(students)}", font=("Arial", 14), bg="lightblue")
    total_label.pack()

    table_frame = tk.Frame(root)
    table_frame.pack(pady=10)

    tree = ttk.Treeview(table_frame, columns=columns, show="headings", height=10)
    for col in columns:
        tree.heading(col, text=col)
        tree.column(col, width=120)
    tree.pack()
    update_table()
    tree.bind("<<TreeviewSelect>>", on_row_select)

    if role == "faculty" or role == "admin":
        tk.Button(root, text="Student Marks", command=lambda: open_academic_entry(False), bg="blue", fg="white", width=20).pack(pady=5)
        tk.Button(root, text="Edit Marks", command=lambda: open_academic_entry(True), bg="purple", fg="white", width=20).pack(pady=5)

    tk.Button(root, text="Logout", command=lambda: logout(root), bg="gray", fg="white", width=15).pack(pady=10)

    root.mainloop()

# --- Login Function ---
def login():
    username = username_var.get()
    password = password_var.get()

    user = users.get(username)
    if user and user["password"] == password:
        open_dashboard(user["role"])
    else:
        messagebox.showerror("Login Failed", "Invalid Username or Password")

# --- Login Window (Reusable Function) ---
def show_login_window():
    global username_var, password_var, login_window

    login_window = tk.Tk()
    login_window.title("Login - Student Management System")
    login_window.geometry("400x300")
    login_window.configure(bg="#dff0d8")

    tk.Label(login_window, text="Login", font=("Arial", 18), bg="#dff0d8").pack(pady=20)

    login_frame = tk.Frame(login_window, bg="#dff0d8")
    login_frame.pack(pady=10)

    username_var = tk.StringVar()
    password_var = tk.StringVar()

    tk.Label(login_frame, text="Username:", bg="#dff0d8").grid(row=0, column=0, pady=5, sticky="e")
    tk.Entry(login_frame, textvariable=username_var).grid(row=0, column=1)

    tk.Label(login_frame, text="Password:", bg="#dff0d8").grid(row=1, column=0, pady=5, sticky="e")
    tk.Entry(login_frame, textvariable=password_var, show="*").grid(row=1, column=1)

    tk.Button(login_frame, text="Login", command=login, bg="blue", fg="white", width=20).grid(row=2, columnspan=2, pady=15)

    login_window.mainloop()

# --- Launch App ---
show_login_window()
*/
