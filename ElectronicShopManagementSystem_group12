
📦 Electronic Shop Management System

📜 Project Description

The Electronic Shop Management System is a Java-based desktop application that streamlines the operations of an electronics retail store. The system integrates billing, customer management, staff administration, and revenue reporting into a unified platform to improve efficiency, reduce manual errors, and support better decision-making.

🔧 Tools & Technologies Used

- Programming Language: Java
- GUI: Java Swing
- Database: MySQL
- Database Connectivity: JDBC
- IDE: Visual Studio Code
- Version Control: Git & GitHub

📦 Package Dependencies

- Java Development Kit (JDK 8+)
- MySQL Server
- MySQL Connector/J (JDBC Driver)
- Git (for version control)


🚀 Steps to Execute the Project

1. Clone the Repository
   bash
   git clone https://github.com/your-username/electronic-shop-management.git
   cd electronic-shop-management
   

2. Setup MySQL Database
   - Create a MySQL database.
   - Execute the provided SQL script to create required tables.

3. Configure JDBC
   - Update the JDBC URL, username, and password in the Java file:
     java
     String url = "jdbc:mysql://localhost:3306/electronic_shop";
     String user = "root";
     String pass = "your_password";

4. Compile and Run
   - Open in VS Code or any Java IDE.
   - Run the `ElectronicsShop.java` file.

🧩 Key Features & Functionalities

- 💰 Billing System: Itemized invoicing with GST/tax, discount, and payment tracking.
- 👥 Customer Management: Customer record with transaction history and filters.
- 👨‍💼 Staff Management: Role-based access, salary, and shift tracking.
- 📈 Revenue Reports: Daily/weekly/monthly analytics and export to PDF/Excel.
- 🔐 Security: Password hashing, role-based access, and SQL injection prevention.


🧑‍🤝‍🧑 Target Users

- Electronics store owners
- Retail managers
- Sales staff (cashiers)
- Inventory/finance administrators


🔁 SDLC Model Used

- Agile Model: Followed iterative sprints with continuous feedback, regular testing, and incremental development.


📋 Requirements Gathering Approach

- Conducted informal interviews with electronics shopkeepers.
- Documented manual processes and pain points.
- Created user stories and wireframes.
- Validated requirements through iterative feedback.

🧪 Testing Methodology

- Unit Testing: Used JUnit for DAO methods and utility logic.
- Integration Testing: Verified communication between GUI, controller, and database.
- Manual Testing: End-to-end user flow and error handling.
- Performance Testing: Ensured billing latency < 2 seconds.

⚠️ Challenges Faced & Solutions

Challenge                        Solution 

JDBC SQL connection errors       Used `try-catch` with clear messages and `PreparedStatements` 
Complex GUI alignment            Used Swing layout managers (e.g., GridBagLayout) 
Secure password storage          Implemented hashing with `BCrypt` 
Manual data validation           Added real-time form validation in GUI 


🌐 Deployment Instructions

This is a desktop application and currently not hosted on a server.

To deploy on another machine:
1. Install Java and MySQL.
2. Import the project and database.
3. Update JDBC credentials in the code.
4. Run via terminal or Java IDE.


🔭 Future Scope

- AI-based sales prediction engine
- Inventory auto-restocking alerts
- Online e-commerce order integration
- Cloud-based sync for multiple branches
- SMS/email invoice feature


👥 Team Members & Roles

- Aayush Kumar
  - SAP ID: 500122815
  - Role: Full-stack developer, requirement analyst, tester
  - Course: Software Engineering  
  - Semester: 4th  
  - Batch: B9 Data Science 

📄 Submitted To

Faculty: Richa Kumari  
 

